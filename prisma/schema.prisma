// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String     @unique
  password         String
  role             String     @default("instructor") // 'admin' or 'instructor'
  instructorNumber String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  courses          Course[] // Een instructeur kan meerdere cursussen geven
  auditLogs        AuditLog[] // Back-relation for audit logs
}

model Location {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  icon    String?
  courses Course[]
}

model Course {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  courseDate       DateTime
  startTime        String
  endTime          String
  basePrice        Float
  examFee          Float
  spotsAvailable   Int
  instructorNumber String
  locationId       String         @db.ObjectId
  location         Location       @relation(fields: [locationId], references: [id])
  categoryId       String         @db.ObjectId
  category         Category       @relation(fields: [categoryId], references: [id])
  instructorId     String?        @db.ObjectId
  instructor       User?          @relation(fields: [instructorId], references: [id], name: "courses")
  registrations    Registration[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Registration {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String
  email           String
  phoneNumber     String
  dateOfBirth     DateTime
  paymentOption   String // 'full' or 'deposit'
  paymentStatus   String   @default("pending") // 'pending', 'paid', 'failed', 'expired', 'canceled'
  molliePaymentId String?
  courseId        String   @db.ObjectId
  course          Course   @relation(fields: [courseId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model MailTemplate {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  description String
  subject     String
  htmlBody    String
}

model MailLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sentAt    DateTime @default(now())
  recipient String
  subject   String
  status    String // 'sent' or 'failed'
  error     String?
}

model AuditLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  actorId    String   @db.ObjectId
  actor      User     @relation(fields: [actorId], references: [id], name: "auditLogs")
  action     String
  entityType String
  entityId   String
  details    Json?
  createdAt  DateTime @default(now())
}

model Setting {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String @unique
  value String
}