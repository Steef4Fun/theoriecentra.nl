// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             String    @default("instructor")
  instructorNumber String?
  accounts         Account[]
  sessions         Session[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  courses     Course[]
  createdAt   DateTime @default(now())
}

model Location {
  id        String   @id @default(cuid())
  name      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
}

model Course {
  id              String         @id @default(cuid())
  courseDate      DateTime
  startTime       String // Stored as "HH:mm"
  endTime         String // Stored as "HH:mm"
  basePrice       Float
  examFee         Float
  instructorNumber String
  spotsAvailable  Int            @default(15)
  createdAt       DateTime       @default(now())
  locationId      String
  location        Location       @relation(fields: [locationId], references: [id])
  categoryId      String
  category        Category       @relation(fields: [categoryId], references: [id])
  registrations   Registration[]
}

model Registration {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  phoneNumber     String
  dateOfBirth     DateTime
  paymentOption   String
  paymentStatus   String   @default("pending")
  molliePaymentId String?  @unique
  createdAt       DateTime @default(now())
  courseId        String
  course          Course   @relation(fields: [courseId], references: [id])
}