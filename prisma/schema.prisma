// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("instructor") // "admin", "instructor"
  accounts      Account[]
  sessions      Session[]
  courses       Course[]

  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?

  auditLogs AuditLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Location {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]

  @@map("locations")
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  icon    String?
  courses Course[]

  @@map("categories")
}

model Course {
  id               String         @id @default(cuid())
  courseDate       DateTime
  startTime        String
  endTime          String
  basePrice        Float
  examFee          Float
  spotsAvailable   Int
  instructorNumber String
  locationId       String
  location         Location       @relation(fields: [locationId], references: [id])
  categoryId       String
  category         Category       @relation(fields: [categoryId], references: [id])
  instructorId     String?
  instructor       User?          @relation(fields: [instructorId], references: [id])
  registrations    Registration[]

  @@map("courses")
}

model Registration {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  firstName       String
  lastName        String
  email           String
  phoneNumber     String
  dateOfBirth     DateTime
  paymentOption   String // "full" or "deposit"
  paymentStatus   String   @default("pending") // "pending", "paid", "failed", "expired", "canceled"
  molliePaymentId String?  @unique
  courseId        String?
  course          Course?  @relation(fields: [courseId], references: [id])

  @@map("registrations")
}

model MailLog {
  id        String   @id @default(cuid())
  sentAt    DateTime @default(now())
  recipient String
  subject   String
  htmlBody  String
  status    String // "sent" or "failed"
  error     String?

  @@map("mail_logs")
}

model AuditLog {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  actorId    String
  actor      User     @relation(fields: [actorId], references: [id])
  action     String
  entityType String
  entityId   String
  details    Json?

  @@map("audit_logs")
}

model MailTemplate {
  id          String @id @default(cuid())
  name        String @unique
  description String
  subject     String
  htmlBody    String

  @@map("mail_templates")
}

model Setting {
  key   String @id
  value String

  @@map("settings")
}

model InstructorProfile {
  id        String  @id @default(cuid())
  name      String
  title     String
  bio       String
  passRate  String
  imageUrl  String
  isActive  Boolean @default(true)
  order     Int     @default(0)

  @@map("instructor_profiles")
}

model Review {
  id          String  @id @default(cuid())
  name        String
  text        String
  rating      Int     @default(5)
  source      String  // e.g., "Google Review", "Facebook Review"
  isActive    Boolean @default(true)
  isFeatured  Boolean @default(false) // For the final CTA box
  order       Int     @default(0)

  @@map("reviews")
}