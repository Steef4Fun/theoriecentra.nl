// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  String    @default("instructor")
  passwordResetToken    String?   @unique
  passwordResetExpires  DateTime?
  accounts              Account[]
  sessions              Session[]
  courses               Course[]
  auditLogs             AuditLog[]

  // Instructor Profile fields
  title     String?
  bio       String?
  passRate  String?
  imageUrl  String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  icon    String?
  courses Course[]
}

model Course {
  id               String         @id @default(cuid())
  courseDate       DateTime
  startTime        String
  endTime          String
  basePrice        Float
  examFee          Float
  spotsAvailable   Int
  instructorNumber String
  locationId       String
  location         Location       @relation(fields: [locationId], references: [id])
  categoryId       String
  category         Category       @relation(fields: [categoryId], references: [id])
  instructorId     String?
  instructor       User?          @relation(fields: [instructorId], references: [id])
  registrations    Registration[]
}

model Registration {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  firstName       String
  lastName        String
  email           String
  phoneNumber     String
  dateOfBirth     DateTime
  paymentOption   String
  paymentStatus   String
  molliePaymentId String?  @unique
  courseId        String?
  course          Course?  @relation(fields: [courseId], references: [id])
}

model AuditLog {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  actorId    String
  actor      User     @relation(fields: [actorId], references: [id])
  action     String
  entityType String
  entityId   String
  details    Json?
}

model MailTemplate {
  id          String @id @default(cuid())
  name        String @unique
  description String
  subject     String
  htmlBody    String @db.Text
}

model MailLog {
  id        String   @id @default(cuid())
  sentAt    DateTime @default(now())
  recipient String
  subject   String
  htmlBody  String   @db.Text
  status    String // "sent" or "failed"
  error     String?
}

model Setting {
  key   String @id
  value String
}

model InstructorProfile {
  id        String  @id @default(cuid())
  name      String
  title     String
  bio       String  @db.Text
  passRate  String
  imageUrl  String
  isActive  Boolean @default(true)
  order     Int     @default(0)
}